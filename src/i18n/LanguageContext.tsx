
import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import { enTranslations } from './locales/en';
import { ruTranslations } from './locales/ru';
import { zhTranslations } from './locales/zh';

// –¢–∏–ø –¥–ª—è –Ω–∞—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export type LanguageCode = 'en' | 'ru' | 'zh';

// –¢–∏–ø –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
type Translations = {
  [key in LanguageCode]: typeof enTranslations;
};

// –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
const translations: Translations = {
  en: enTranslations,
  ru: ruTranslations,
  zh: zhTranslations,
};

// –ò–º–µ–Ω–∞ —è–∑—ã–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const languageNames: Record<LanguageCode, string> = {
  en: 'English',
  ru: '–†—É—Å—Å–∫–∏–π',
  zh: '‰∏≠Êñá',
};

// –§–ª–∞–≥–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
export const languageFlags: Record<LanguageCode, string> = {
  en: 'üá∫üá∏',
  ru: 'üá∑üá∫',
  zh: 'üá®üá≥',
};

// –¢–∏–ø –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface LanguageContextType {
  language: LanguageCode;
  setLanguage: (language: LanguageCode) => void;
  t: (key: string, params?: Record<string, string | number>) => string;
  allLanguages: LanguageCode[];
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

interface LanguageProviderProps {
  children: ReactNode;
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
export const LanguageProvider = ({ children }: LanguageProviderProps) => {
  const [language, setLanguageState] = useState<LanguageCode>(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–∏ —è–∑—ã–∫ –≤ localStorage
    const savedLanguage = localStorage.getItem('language') as LanguageCode;
    if (savedLanguage && Object.keys(translations).includes(savedLanguage)) {
      return savedLanguage;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    const browserLang = navigator.language.split('-')[0] as LanguageCode;
    if (Object.keys(translations).includes(browserLang)) {
      return browserLang;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    return 'en';
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ localStorage
  const setLanguage = (lang: LanguageCode) => {
    localStorage.setItem('language', lang);
    setLanguageState(lang);
  };

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è SEO
  useEffect(() => {
    document.documentElement.lang = language;
  }, [language]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É
  const t = (key: string, params?: Record<string, string | number>): string => {
    // –†–∞–∑–¥–µ–ª—è–µ–º –∫–ª—é—á –Ω–∞ —á–∞—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "home.title" -> ["home", "title"]
    const parts = key.split('.');
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    let value: any = translations[language];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —á–∞—Å—Ç—è–º –∫–ª—é—á–∞, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    for (const part of parts) {
      if (value && value[part] !== undefined) {
        value = value[part];
      } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
        return key;
      }
    }
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (typeof value === 'string' && params) {
      // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {name} –Ω–∞ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
      return Object.entries(params).reduce((acc, [paramKey, paramValue]) => {
        return acc.replace(new RegExp(`{${paramKey}}`, 'g'), String(paramValue));
      }, value);
    }
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–∞—Å—Å–∏–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    return value;
  };

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  const allLanguages = Object.keys(translations) as LanguageCode[];

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t, allLanguages }}>
      {children}
    </LanguageContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
